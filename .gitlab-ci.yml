# stages:
#   - prepare
#   - build

image: openjdk:8-jdk #Defining the Docker Image

# build-job:
#   stage: build
#   script:
#     - echo "Hey, $GITLAB_USER_LOGIN! bhai"

variables:
  ANDROID_COMPILE_SDK: '28' #set compile SDK version
  ANDROID_BUILD_TOOLS: '28.0.2' #set build tool version
  ANDROID_SDK_TOOLS: '4333796' #set SDK tool build number you can find yous here https://developer.android.com/studio/releases/sdk-tools

before_script:
  # Fetch the specified SDK tools version to build with
  - wget --quiet --output-document=/tmp/sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip /tmp/sdk-tools-linux.zip -d .android

  # Set up environment variables
  - export ANDROID_HOME=$PWD/.android
  - export PATH=$PATH:$PWD/.android/platform-tools/

  # Install platform tools and Android SDK for the compile target
  - echo y | .android/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"

  - curl -sL https://deb.nodesource.com/setup_10.x | bash #Add Node Repo
  - apt-get install -y nodejs #Install NOde JS
  # - npm install -g react-native-cli #Install React-Native CLI
  - npm i -g yarn #add yarn pkg
  - yarn #Install npm packages
  # - react-native link #Link the resources
  - chmod +x android/gradlew #Provide permission for execution

stages:
  - build_release_android

build_release_android:
  stage: build_release_android
  script:
    - mkdir /PlayJson #make temp directory named PlayJson in root of project
    - 'echo $PLAY_STORE_JSON > /PlayJson/play-store-key.json' # copy git variable value to play-store-key.json file
    - yarn android-clean # bundle the app (Execute from package.json's script block)
    - yarn build-apk #create release app (Execute from package.json's script block)
    - yarn generate-apk
    # - cd android && ./gradlew publishApkRelease  # navigate to android dir & publish app on play store
  only:
    - master #set trigger for CICD if push or merge in master branch
  artifacts:
    paths:
      - ./android/app/build/outputs/ # set artifact path which store your APK file

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - ./node_modules/

# install:
#   stage: prepare
#   tags:
#     - docker
#   script:
#     - yarn install

# typescript-runner:
#   stage: build
#   script:
#     - yarn
#     - yarn tsc
#     - echo "tsc build sucessfully "
# # build:
# #   stage: deploy
# #   script:
# #     - echo "deploys something from the $CI_COMMIT_BRANCH branch."

# build:android:debug:
#   stage: build
#   tags:
#     - android
#     - node
#     - react-native
#   before_script:
#     - ./dev-start.sh
#   script:
#     - ./scripts/build-android-debug.sh
#   artifacts:
#     paths:
#       - ./build/app-debug.apk
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-android-ios
#     paths:
#       - ./node_modules/
#       - ./android/.gradle/
